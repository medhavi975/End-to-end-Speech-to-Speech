# -*- coding: utf-8 -*-
"""Speech to Speech (IIIT)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dOnfL_h0cE2T2Uols6bSY0WS0S6Fgl3V
"""

!pip install speechrecognition
!pip3 install SpeechRecognition
!pip install pydub

!pip install pydub
!pip install pydub(ffmpeg)

import pydub

from pydub import AudioSegment
def convert_to_wav(mp3_file):
  sound = AudioSegment.from_mp3(mp3_file)
  sound.export(mp3_file[:-4] + ".wav", format="wav")
  convert_mp3_to_wav("/content/audio (2).mp3", wav_file_path)

# Import libraries
!pip install speech_recognition
!pip install audiosegment
from audiosegment import AudioSegment
import speech_recognition as sr

import os
from pydub import AudioSegment
from pydub.silence import split_on_silence

# Create a speech recognition object
r = sr.Recognizer()

def transcribe_large_audio(path):
    """Split audio into chunks and apply speech recognition"""
    # Open audio file with pydub
    sound = AudioSegment.from_wav(path)

    # Split audio where silence is 700ms or greater and get chunks
    chunks = split_on_silence(sound, min_silence_len=700, silence_thresh=sound.dBFS-14, keep_silence=700)

    # Create folder to store audio chunks
    folder_name = "audio-chunks"
    if not os.path.isdir(folder_name):
        os.mkdir(folder_name)

    whole_text = ""
    # Process each chunk
    for i, audio_chunk in enumerate(chunks, start=1):
        # Export chunk and save in folder
        chunk_filename = os.path.join(folder_name, f"chunk{i}.wav")
        audio_chunk.export(chunk_filename, format="wav")

        # Recognize chunk
        with sr.AudioFile(chunk_filename) as source:
            audio_listened = r.record(source)
            # Convert to text
            try:
                text = r.recognize_google(audio_listened)
            except sr.UnknownValueError as e:
                print("Error:", str(e))
            else:
                text = f"{text.capitalize()}. "
                print(chunk_filename, ":", text)
                whole_text += text

    # Return text for all chunks
    return whole_text

theresult = transcribe_large_audio("/content/audio (2).wav")

print(theresult, file=open('theresult.txt', 'w'))

from google.colab import drive
drive.mount('/content/drive')

!pip install ibm_watson
!pip install ibm_cloud_sdk_core.authenticators
from ibm_watson import SpeechToTextV1,LanguageTranslatorV3
from ibm_cloud_sdk_core.authenticators import IAMAuthenticator

greek = 'en-el'
chinese = 'en-zh'
hindi = 'en-hi'

sttauthenticator=IAMAuthenticator(sttapikey)
stt=SpeechToTextV1(authenticator=sttauthenticator)
stt.set_service_url(stturl)

with open('/content/audio (2).wav', 'rb') as f:
  res = stt.recognize(audio=f, content_type='audio/wav', model='en-AU_NarrowbandModel').get_result()

import os
mountpoint = "/content/theresult.txt"
if not os.path.exists(mountpoint):
  print(f"Mountpoint '{mountpoint}' does not exist.")
elif not os.path.isdir(mountpoint):
  print(f"Mountpoint '{mountpoint}' is not a directory.")
else:
  print(f"Mountpoint '{mountpoint}' exists and is a directory.")
!mkdir /content/theresult.txt
!rm -rf /content/theresult.txt
!mkdir /content/theresult.txt

from google.colab import drive
drive.mount("/content/theresult.txt")

ltauthenticator = IAMAuthenticator(ltapikey)
lt = LanguageTranslatorV3(version='2018-05-01', authenticator=ltauthenticator)
lt.set_service_url(lturl)
sttauthenticator = IAMAuthenticator(sttapikey)
stt = SpeechToTextV1(authenticator=sttauthenticator)
stt.set_service_url(stturl)

translation = lt.translate(text=theresult , model_id=hindi).get_result()
translatedtext = translation['translations'][0]['translation']
translatedtext

#text to speech

!pip install gTTs

from gtts import gTTS
text_to_say =theresult
language = "en"
gtts_object = gTTS(text =  text_to_say,
     lang = language,
     slow = False)
gtts_object.save("/content/gtts.wav")

from IPython.display import Audio
Audio("/content/gtts.wav")

from gtts import gTTS
text_to_say =translatedtext
language = "hi"
gtts_object = gTTS(text =  text_to_say,
     lang = language,
     slow = False)
gtts_object.save("/content/gtts.wav")

from IPython.display import Audio
Audio("/content/gtts.wav")

from gtts import gTTS
text_to_say =theresult
language = "fr"
gtts_object = gTTS(text =  text_to_say,
     lang = language,
     slow = False)
gtts_object.save("/content/gtts.wav")

from IPython.display import Audio
Audio("/content/gtts.wav")

from gtts import gTTS
text_to_say =theresult
language = "ja"
gtts_object = gTTS(text =  text_to_say,
     lang = language,
     slow = False)
gtts_object.save("/content/gtts.wav")

from IPython.display import Audio
Audio("/content/gtts.wav")